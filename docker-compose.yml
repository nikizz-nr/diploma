version: "2.2"

services:
  database:
    image: postgres:alpine
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
    healthcheck:
      test: pg_isready -U $${POSTGRES_USER} || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-net

  app:
    build:
      context: ./
      dockerfile: docker/Dockerfile.app
    restart: unless-stopped
    ports:
      - 8000:8000
    depends_on:
      database:
        condition: service_healthy
    environment:
      SECRET_KEY:
      DEBUG:
      POSTGRES_DB:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
    healthcheck:
      test: curl --fail http://localhost:8000/ || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-net

  nginx-proxy:
    build:
      context: ./
      dockerfile: docker/Dockerfile.nginx-proxy
    restart: unless-stopped
    ports:
      - 8080:80
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:80/ || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    expose:
      - 80
    networks:
      - app-net

volumes:
  pgdata:

networks:
  app-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.110.0/24
          ip_range: 192.168.110.0/24
